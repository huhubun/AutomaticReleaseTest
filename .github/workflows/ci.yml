name: My-Application-CI

on: [push]

env:
  DOTNET_SDK_VERSION: 3.1
  NET_CORE_VERSION: netcoreapp3.1
  REGEX_REF_VERSION: .*\/v(?<version>\d+\.\d+\.\d+)$
  REGEX_XML_VERSION: <Version>(?<version>\d+.\d+.\d+)</Version>

jobs:
  main:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Output something
        run: echo "github_ref ${{ github.ref }} | github_event_name ${{ github.event_name }} | github_job_id ${{ github.job }} | github_sha ${{ github.sha }} | runner_os ${{ runner.os }}"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get application version
        shell: pwsh
        run: |
          $ref_version, $csproj_version, $application_version

          if("${{ github.ref }}" -match "${{ env.REGEX_REF_VERSION }}")
          {
              $ref_version = $matches.version
              $application_version = $ref_version

              echo "Find version information in 'github.ref': '${{ github.ref }}'"
              echo "IS_PRE_RELEASE=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          else 
          {
              echo "The version information is not found in 'github.ref': '${{ github.ref }}', try to get it from the '.csproj' file."
          }

          $versionXmlInCsproj = Select-String -Path ".\src\MyConsoleApp\MyConsoleApp.csproj" -Pattern "${{ env.REGEX_XML_VERSION }}" -Raw
          if($versionXmlInCsproj -match "${{ env.REGEX_XML_VERSION }}")
          {
              $csproj_version = $matches.version
              $application_version = $csproj_version

              echo "Find version information in '.csproj' file."
              echo "IS_PRE_RELEASE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          else
          {
            throw "No version information was found in 'github.ref' and '.csproj' files."
          }

          if(($ref_version -ne $null) -and ($csproj_version -ne $null) -and ($ref_version -ne $csproj_version))
          {
            throw "The version number in 'github.ref' does not match the one in the '.csproj' file."
          }

          echo "APPLICATION_VERSION=$application_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Get-Content $env:GITHUB_ENV

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Verify .NET Core
        run: dotnet --info

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore --nologo

      - name: Publish for Windows
        if: startsWith(matrix.os, 'windows-')
        run: dotnet publish -f ${{ env.NET_CORE_VERSION }} -o ./myapp_${{ env.APPLICATION_VERSION }}_windows --nologo

      - name: Package for Windows
        if: startsWith(matrix.os, 'windows-')
        run: Compress-Archive -Path .\myapp_${{ env.APPLICATION_VERSION }}_windows 'myapp_${{ env.APPLICATION_VERSION }}_windows.zip'

      - name: Upload MyApplication for Windows
        if: startsWith(matrix.os, 'windows-')
        uses: actions/upload-artifact@v2
        with:
          name: myapp_${{ env.APPLICATION_VERSION }}_windows
          path: ./myapp_${{ env.APPLICATION_VERSION }}_windows.zip

      - name: Upload MyApplication for Windows to release
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.github_release.outputs.upload_url }}
          asset_path: ./myapp_${{ env.APPLICATION_VERSION }}_windows.zip
          asset_name: myapp_${{ env.APPLICATION_VERSION }}_windows.zip
          asset_content_type: application/zip

      - name: Publish for Linux
        if: startsWith(matrix.os, 'ubuntu-')
        run: dotnet publish -f ${{ env.NET_CORE_VERSION }} -o ./myapp_${{ env.APPLICATION_VERSION }}_linux --nologo

      - name: Package for Linux
        if: startsWith(matrix.os, 'ubuntu-')
        run: tar caf myapp_${{ env.APPLICATION_VERSION }}_linux.tar.gz myapp_${{ env.APPLICATION_VERSION }}_linux

      - name: Upload MyApplication for Linux
        if: startsWith(matrix.os, 'ubuntu-')
        uses: actions/upload-artifact@v2
        with:
          name: myapp_${{ env.APPLICATION_VERSION }}_linux
          path: ./myapp_${{ env.APPLICATION_VERSION }}_linux.tar.gz

      - name: Upload MyApplication for Linux to release
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'ubuntu-') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.github_release.outputs.upload_url }}
          asset_path: ./myapp_${{ env.APPLICATION_VERSION }}_linux.tar.gz
          asset_name: myapp_${{ env.APPLICATION_VERSION }}_linux.tar.gz
          asset_content_type: application/x-gzip

      - name: Publish for macOS
        if: startsWith(matrix.os, 'macos-')
        run: dotnet publish -f ${{ env.NET_CORE_VERSION }} -o ./myapp_${{ env.APPLICATION_VERSION }}_macos --nologo

      - name: Package for macOS
        if: startsWith(matrix.os, 'macos-')
        run: tar caf myapp_${{ env.APPLICATION_VERSION }}_macos.tar.gz myapp_${{ env.APPLICATION_VERSION }}_macos

      - name: Upload MyApplication for macOS
        if: startsWith(matrix.os, 'macos-')
        uses: actions/upload-artifact@v2
        with:
          name: myapp_${{ env.APPLICATION_VERSION }}_macos
          path: ./myapp_${{ env.APPLICATION_VERSION }}_macos.tar.gz

      - name: Upload MyApplication for macOS to release
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'macos-') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.github_release.outputs.upload_url }}
          asset_path: ./myapp_${{ env.APPLICATION_VERSION }}_macos.tar.gz
          asset_name: myapp_${{ env.APPLICATION_VERSION }}_macos.tar.gz
          asset_content_type: application/x-gzip
